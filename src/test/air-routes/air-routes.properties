# The suffix of the files to read
inputFileExtension=csv


# Properties that are mapped to rdfs:label will also be written as properties
mapper.alwaysAddPropertyStatements=true

## Mappings

# Namespace configuration
mapper.mapping.typeNamespace=http://kelvinlawrence.net/air-routes/class/
mapper.mapping.vertexNamespace=http://kelvinlawrence.net/air-routes/resource/
mapper.mapping.edgeNamespace=http://kelvinlawrence.net/air-routes/objectProperty/
mapper.mapping.vertexPropertyNamespace=http://kelvinlawrence.net/air-routes/datatypeProperty/
mapper.mapping.edgePropertyNamespace=http://kelvinlawrence.net/air-routes/datatypeProperty/
mapper.mapping.defaultNamedGraph=http://aws.amazon.com/neptune/vocab/v01/DefaultNamedGraph
mapper.mapping.defaultType=http://www.w3.org/2002/07/owl#Thing
mapper.mapping.defaultPredicate=http://aws.amazon.com/neptune/csv2rdf/objectProperty/edge
mapper.mapping.edgeContextNamespace=http://kelvinlawrence.net/air-routes/resource/

# Mapping from property graph vertex types to instance labels

# For each vertex of type "version" add a label using the property "code" to the RDF resource representing the vertex
mapper.mapping.pgVertexType2PropertyForRdfsLabel.version=code

# For each vertex of type "country" add a label using the property "code"  to the RDF resource representing the vertex
mapper.mapping.pgVertexType2PropertyForRdfsLabel.country=code

# For each vertex of type "airport" add a label using the property "code"  to the RDF resource representing the vertex
mapper.mapping.pgVertexType2PropertyForRdfsLabel.airport=code

# For each vertex of type "continent" add a label using the property "code"  to the RDF resource representing the vertex
mapper.mapping.pgVertexType2PropertyForRdfsLabel.continent=code

# Mapping from property graph properties to RDF resources

# Map values of property "country" to an IRI using the same pattern as in the URI post transformation below
mapper.mapping.pgProperty2RdfResourcePattern.country=http://kelvinlawrence.net/air-routes/resource/country/{{VALUE}}


## URI post transformations (will be applied in the order of the grouping integer values)

# For each resource representing an airport use the corresponding code (e.g., ATL, DFW) instead of an integer in its IRI
transformer.uriPostTransformations.1.srcPattern=http://kelvinlawrence.net/air-routes/resource/([0-9]+)
transformer.uriPostTransformations.1.typeUri=http://kelvinlawrence.net/air-routes/class/Airport
transformer.uriPostTransformations.1.propertyUri=http://kelvinlawrence.net/air-routes/datatypeProperty/code
transformer.uriPostTransformations.1.dstPattern=http://kelvinlawrence.net/air-routes/resource/airport/{{VALUE}}

# For each resource representing a country use the corresponding ISO 3166-1 alpha-2 code (e.g., CA, US) instead of an integer in its IRI
transformer.uriPostTransformations.2.srcPattern=http://kelvinlawrence.net/air-routes/resource/([0-9]+)
transformer.uriPostTransformations.2.typeUri=http://kelvinlawrence.net/air-routes/class/Country
transformer.uriPostTransformations.2.propertyUri=http://kelvinlawrence.net/air-routes/datatypeProperty/code
transformer.uriPostTransformations.2.dstPattern=http://kelvinlawrence.net/air-routes/resource/country/{{VALUE}}

# For each resource representing a continent use the two-letter code (AF, AN, AS, EU, NA, OC, SA) instead of an integer in its IRI
# The integer values do no need to be consecutive, so commenting out a transformation does harm the configuration.
transformer.uriPostTransformations.6.srcPattern=http://kelvinlawrence.net/air-routes/resource/([0-9]+)
transformer.uriPostTransformations.6.typeUri=http://kelvinlawrence.net/air-routes/class/Continent
transformer.uriPostTransformations.6.propertyUri=http://kelvinlawrence.net/air-routes/datatypeProperty/code
transformer.uriPostTransformations.6.dstPattern=http://kelvinlawrence.net/air-routes/resource/continent/{{VALUE}}
